# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  id: ID!
  name: String!
  street: String!
  street2: String
  city: String!
  county: String
  state: String
  zip: String!
  country: String!
  formattedAddress: String!
  phone: String!
  email: String!
  residential: Boolean!
  primary: Boolean!
}

input AddressCreateInput {
  city: String!
  primary: Boolean
  country: String
  email: String
  phone: String
  state: String!
  street: String!
  street2: String
  zip: String!
}

input AddressUpdateInput {
  city: String
  primary: Boolean
  country: String
  email: String
  phone: String
  state: String
  street: String
  zip: String
}

input AddressWhereUniqueInput {
  id: ID!
}

input AuthenticateInput {
  phone: String!
  passcode: String
  method: AuthenticateMethod
}

enum AuthenticateMethod {
  CALL
  SMS
  EMAIL
}

type BillingInfo {
  id: ID!
  company: String
  firstName: String!
  lastName: String!
  valid: Boolean!
  vatNumber: String
  paymentMethod: PaymentMethod!
  updatedBy: BillingInfoUpdatedBy!
  object: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type BillingInfoUpdatedBy {
  country: String!
  ip: String!
}

type Bin {
  id: ID!
  cell: Float!
  column: Float!
  row: Float!
  location: Float!
}

type Brand {
  id: ID!
  logo: String
  name: String!
  slug: String!
  url: String!
}

type Cart {
  id: ID!
  canceledAt: DateTime
  completedAt: DateTime
  confirmedAt: DateTime
  planId: String
  couponCode: String
  protectionPlan: Boolean!
  service: String
}

type CartItem {
  id: ID!
  points: Int!
  quantity: Int!
}

type Category {
  id: ID!
  logo: String
  name: String!
  slug: String!
  description: String
  includedEssentials: [String!]
  parent: Category
}

type CategoryInspectionTask {
  id: ID!
  name: String!
}

type Coupon {
  id: ID!
  appliesToAllPlans: Boolean!
  appliesToNonPlanCharges: Boolean!
  couponType: String!
  discount: CouponDiscount!
  code: String!
  duration: String!
  freeTrialAmount: Float
  freeTrialUnit: String
  invoiceDescription: String
  maxRedemptions: Float
  maxRedemptionsPerAccount: Float
  name: String!
  object: String!
  state: String!
  temporalAmount: Float
  temporalUnit: String
  uniqueCodeTemplate: String
  uniqueCouponCodesCount: Float
  createdAt: DateTime!
  expiredAt: DateTime
  redeemBy: DateTime
}

type CouponDiscount {
  currencies: [CouponDiscountCurrency!]
  percent: Float
  trial: CouponDiscountTrial
  type: String!
}

type CouponDiscountCurrency {
  currency: String!
  amount: Float!
}

type CouponDiscountTrial {
  length: Float!
  unit: String!
}

type CouponRedemption {
  id: ID!
  discounted: Float
  object: String!
  state: String!
  createdAt: DateTime!
  couponId: String!
  subscriptionId: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Deposit {
  id: ID!
  amount: Float!
  notes: String
  plaidUrl: String
  legacy: Boolean
  createdAt: DateTime!
}

type File {
  id: ID!
  filename: String!
  contentType: String!
  name: String
  description: String
}

type Income {
  id: ID!
  commission: Float!
  dailyRate: Float!
  membership: Boolean!
  planId: String
  notes: String
  transferId: String
}

type Inventory {
  id: ID!
  condition: InventoryCondition!
  markedForReturn: Boolean
  commission: Float!
  missingEssentials: [String!]!
  serial: String
  status: InventoryStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum InventoryCondition {
  NEW
  LIKENEW
  EXCELLENT
  USED
  DAMAGED
}

enum InventoryStatus {
  NEW
  PENDING
  ACCEPTED
  ENROUTEWAREHOUSE
  INSPECTING
  INWAREHOUSE
  SHIPMENTPREP
  ENROUTEMEMBER
  WITHMEMBER
  RETURNING
  OUTOFSERVICE
  ENROUTEOWNER
  RETURNED
  STOLEN
  LOST
}

type Invoice {
  id: ID!
  balance: Float
  collectionMethod: String!
  customerNotes: String
  discount: Float
  netTerms: Float
  number: Float
  object: String!
  origin: String!
  paid: Float!
  poNumber: String
  previousInvoiceId: String
  refundableAmount: String
  state: String!
  subtotal: Float!
  tax: Float
  total: Float!
  termsAndConditions: String
  type: String
  vatNumber: String
  vatReverseChargeNotes: String
  currencies: [Pricing!]!
  dueAt: DateTime!
  createdAt: DateTime!
  closedAt: DateTime
}

input MarketingSourceInput {
  campaign: String!
  source: String!
  medium: String!
}

type Mutation {
  addressSetPrimary(where: AddressWhereUniqueInput!): Address!
  addressCreate(input: AddressCreateInput!): Address!
  addressUpdate(where: AddressWhereUniqueInput!, input: AddressUpdateInput!): Address!
  addressDestroy(where: AddressWhereUniqueInput!): Address!
  authenticate(input: AuthenticateInput!): Token!
  register(input: RegisterInput!): Token!
}

type PaymentMethod {
  accountType: String!
  billingAgreementId: String
  cardType: String
  expMonth: Float
  expYear: Float
  firstSix: String
  lastFour: String
  object: String!
  routingNumber: String
  routingNumberBank: String
}

type Plan {
  id: ID!
  accountingCode: String
  autoRenew: Boolean
  code: String!
  currencies: [Pricing!]!
  description: String
  intervalLength: Float
  intervalUnit: String
  name: String!
  object: String!
  setupFeeAccountingCode: String
  state: String!
  taxCode: String
  taxExempt: Boolean!
  totalBillingCycles: Float!
  trialLength: Float!
  trialUnit: String
  deletedAt: DateTime
}

type PlanAddOn {
  id: ID!
  accountingCode: String
  code: String!
  currencies: [Pricing!]!
  defaultQuantity: Float!
  displayQuantity: Boolean!
  object: String!
  name: String!
  state: String!
  taxCode: String
  createdAt: DateTime!
  deletedAt: DateTime
}

type Pricing {
  currency: String
  setupFee: Float
  unitAmount: Float!
}

type Product {
  id: ID!
  description: String
  features: [String!]
  images: [String!]!
  inTheBox: [String!]
  mfr: String
  name: String!
  elasticId: String!
  points: Int!
  popularity: Int!
  shippingWeight: Int
  slug: String!
  aliases: String
  stock: Int!
  demand: Int!
  brand: Brand
}

type ProductAttribute {
  id: ID!
  name: String!
}

type ProductAttributeValue {
  id: ID!
  value: String!
}

type ProductValue {
  id: ID!
  value: String!
  condition: InventoryCondition!
  source: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  address(id: ID!): Address!
  addresses: [Address!]!
}

type Queue {
  id: ID!
  lastNotified: DateTime
}

input RegisterInput {
  email: String!
  name: String!
  phone: String!
  roles: [UserRole!]
  marketingSource: MarketingSourceInput
}

type ShipKit {
  id: ID!
  completedAt: DateTime
  confirmedAt: DateTime
  airbox: Boolean!
}

type Shipment {
  id: ID!
  airbox: Boolean!
  pickup: Boolean!
  carrier: String
  carrierDeliveredAt: DateTime
  carrierReceivedAt: DateTime
  estDeliveryDate: DateTime
  expedited: Boolean!
  cost: Float!
  direction: ShipmentDirection!
  easyPostId: String
  height: Float!
  labelUrl: String
  labelUrlZPL: String
  length: Float!
  publicUrl: String
  service: String!
  status: ShipmentStatus!
  signedBy: String
  trackingCode: String
  type: ShipmentType!
  weight: Float!
  width: Float!
  createdAt: DateTime!
}

enum ShipmentDirection {
  INBOUND
  OUTBOUND
}

type ShipmentInspection {
  id: ID!
  condition: InventoryCondition!
  hasEssentials: Boolean!
  missingEssentials: [String!]!
  images: [String!]!
  notes: String
}

enum ShipmentStatus {
  UNKNOWN
  PRETRANSIT
  INTRANSIT
  OUTFORDELIVERY
  DELIVERED
  AVAILABLEFORPICKUP
  RETURNTOSENDER
  FAILURE
  CANCELLED
  ERROR
}

enum ShipmentType {
  ACCESS
  EARN
}

type Subscription {
  id: ID!
  activatedAt: DateTime!
  addOnsTotal: Float!
  autoRenew: Boolean!
  bankAccountAuthorizedAt: DateTime
  canceledAt: DateTime
  collectionMethod: String!
  currency: String!
  currentPeriodEndsAt: DateTime
  currentPeriodStartedAt: DateTime
  currentTermEndsAt: DateTime
  currentTermStartedAt: DateTime
  customerNotes: String
  expirationReason: String
  netTerms: Float
  object: String!
  quantity: Float
  remainingBillingCycles: Float
  remainingPauseCycles: Float
  renewalBillingCycles: Float
  state: String!
  subtotal: Float!
  totalBillingCycles: Float
  unitAmount: Float
  trialEndsAt: DateTime
  trialStartedAt: DateTime
  createdAt: DateTime!
  deletedAt: DateTime
  expiresAt: DateTime
  pausedAt: DateTime
}

type SubscriptionAddOn {
  id: ID!
  object: String!
  quantity: Float!
  unitAmount: Float
  createdAt: DateTime!
  expiredAt: DateTime
}

type Token {
  token: String
  user: User
}

type Transaction {
  id: ID!
  amount: Float!
  avsCheck: String
  collectionMethod: String
  currency: String
  customerMessage: String
  customerMessageLocale: String
  cvvCheck: String
  gatewayApprovalCode: String
  gatewayMessage: String
  gatewayReference: String
  gatewayResponseCode: String
  gatewayResponseTime: Float
  ipAddressCountry: String
  ipAddressV4: String
  object: String!
  origin: String
  originalTransactionId: String
  postage: TransactionPaymentGateway
  paymentMethod: PaymentMethod!
  refunded: Boolean
  status: String!
  statusCode: String!
  statusMessage: String!
  success: Boolean!
  type: String!
  uuid: String!
  createdAt: DateTime!
  collectedAt: DateTime
  voidedAt: DateTime
}

type TransactionPaymentGateway {
  id: ID!
  name: String!
  object: String!
  type: String!
}

type User {
  id: ID!
  avatar: String
  bio: String
  billingHour: Int!
  billingDay: Int
  businessName: String
  contributorStep: Int!
  email: String!
  location: String
  phone: String!
  name: String!
  planId: String
  points: Int!
  roles: [UserRole!]!
  status: UserStatus!
  site: String!
  stripeId: String!
  protectionPlan: Boolean!
  legacyPlan: String
  additionalItems: Float
  vip: Boolean!
  currentInventory: [Inventory!]!
  inventory: [Inventory!]!
}

type UserBankAccount {
  id: ID!
  primary: Boolean!
  mask: String!
  name: String!
}

type UserEmployment {
  id: ID!
  domain: String!
  name: String!
  title: String!
  role: String!
  subRole: String!
  senority: String!
}

type UserIntegration {
  id: ID!
  type: String!
  value: String!
}

type UserMarketingSource {
  id: ID!
  campaign: String!
  medium: String
  source: String!
}

enum UserRole {
  ADMIN
  MEMBER
  CONTRIBUTOR
  SUPPORT
  LOGISTICS
  GUEST
}

type UserSocialHandle {
  id: ID!
  type: String!
  handle: String!
}

enum UserStatus {
  APPROVED
  PENDING
  BLACKLISTED
}

type UserTermAgreement {
  id: ID!
  type: String!
  agreed: Boolean!
  createdAt: DateTime!
}

type UserVerification {
  id: ID!
  type: String!
  verified: Boolean!
}

type Warehouse {
  id: ID!
  city: String!
  country: String!
  email: String!
  phone: String!
  name: String!
  primary: Boolean!
  residential: Boolean!
  state: String!
  street1: String!
  street2: String
  zip: String!
}
